// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyAirbnb.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyAirbnb.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyAirbnb.DataAccess.Entities.Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocationTagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxAdultsAllowed")
                        .HasColumnType("integer");

                    b.Property<int>("MaxChildrenAllowed")
                        .HasColumnType("integer");

                    b.Property<int>("MaxInfantsAllowed")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPetsAllowed")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Accommodations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A beautiful beach house with stunning ocean views.",
                            LocationTagName = "Beach",
                            MaxAdultsAllowed = 4,
                            MaxChildrenAllowed = 2,
                            MaxInfantsAllowed = 1,
                            MaxPetsAllowed = 1,
                            Name = "Beach House",
                            PricePerNight = 200.00m
                        },
                        new
                        {
                            Id = 2,
                            Description = "A cozy cabin in the mountains, perfect for a getaway.",
                            LocationTagName = "Mountain",
                            MaxAdultsAllowed = 2,
                            MaxChildrenAllowed = 2,
                            MaxInfantsAllowed = 1,
                            MaxPetsAllowed = 0,
                            Name = "Mountain Cabin",
                            PricePerNight = 150.00m
                        },
                        new
                        {
                            Id = 3,
                            Description = "A modern apartment in the heart of the city.",
                            LocationTagName = "City",
                            MaxAdultsAllowed = 2,
                            MaxChildrenAllowed = 1,
                            MaxInfantsAllowed = 1,
                            MaxPetsAllowed = 0,
                            Name = "City Apartment",
                            PricePerNight = 100.00m
                        },
                        new
                        {
                            Id = 4,
                            Description = "A charming cottage in the countryside.",
                            LocationTagName = "Country",
                            MaxAdultsAllowed = 3,
                            MaxChildrenAllowed = 2,
                            MaxInfantsAllowed = 1,
                            MaxPetsAllowed = 1,
                            Name = "Country Cottage",
                            PricePerNight = 120.00m
                        },
                        new
                        {
                            Id = 5,
                            Description = "A serene house by the lake.",
                            LocationTagName = "Lake",
                            MaxAdultsAllowed = 4,
                            MaxChildrenAllowed = 3,
                            MaxInfantsAllowed = 2,
                            MaxPetsAllowed = 1,
                            Name = "Lake House",
                            PricePerNight = 180.00m
                        },
                        new
                        {
                            Id = 6,
                            Description = "A luxurious villa in the desert.",
                            LocationTagName = "Desert",
                            MaxAdultsAllowed = 5,
                            MaxChildrenAllowed = 3,
                            MaxInfantsAllowed = 2,
                            MaxPetsAllowed = 0,
                            Name = "Desert Villa",
                            PricePerNight = 250.00m
                        },
                        new
                        {
                            Id = 7,
                            Description = "A rustic lodge in the forest.",
                            LocationTagName = "Forest",
                            MaxAdultsAllowed = 3,
                            MaxChildrenAllowed = 2,
                            MaxInfantsAllowed = 1,
                            MaxPetsAllowed = 1,
                            Name = "Forest Lodge",
                            PricePerNight = 160.00m
                        },
                        new
                        {
                            Id = 8,
                            Description = "A private bungalow on a tropical island.",
                            LocationTagName = "Island",
                            MaxAdultsAllowed = 2,
                            MaxChildrenAllowed = 1,
                            MaxInfantsAllowed = 1,
                            MaxPetsAllowed = 0,
                            Name = "Island Bungalow",
                            PricePerNight = 300.00m
                        },
                        new
                        {
                            Id = 9,
                            Description = "A cozy chalet near the ski slopes.",
                            LocationTagName = "Ski",
                            MaxAdultsAllowed = 4,
                            MaxChildrenAllowed = 2,
                            MaxInfantsAllowed = 1,
                            MaxPetsAllowed = 0,
                            Name = "Ski Chalet",
                            PricePerNight = 220.00m
                        },
                        new
                        {
                            Id = 10,
                            Description = "A secluded retreat in the jungle.",
                            LocationTagName = "Jungle",
                            MaxAdultsAllowed = 3,
                            MaxChildrenAllowed = 2,
                            MaxInfantsAllowed = 1,
                            MaxPetsAllowed = 1,
                            Name = "Jungle Retreat",
                            PricePerNight = 280.00m
                        });
                });

            modelBuilder.Entity("MyAirbnb.DataAccess.Entities.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccommodationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalAdults")
                        .HasColumnType("integer");

                    b.Property<int>("TotalChildren")
                        .HasColumnType("integer");

                    b.Property<int>("TotalInfants")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPets")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("MyAirbnb.DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("MyAirbnb.DataAccess.Entities.Reservation", b =>
                {
                    b.HasOne("MyAirbnb.DataAccess.Entities.Accommodation", "Accommodation")
                        .WithMany("Reservations")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyAirbnb.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accommodation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyAirbnb.DataAccess.Entities.Accommodation", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
